{"version":3,"sources":["firebase-config.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","open","setOpen","update","setUpdate","toUpdateId","setToUpdateId","useEffect","console","log","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","name","data","todo","datatime","handleClose","Container","maxWidth","noValidate","TextField","variant","margin","required","fullWidth","label","autoFocus","value","onChange","event","target","Button","type","color","onClick","preventDefault","add","datetime","FieldValue","serverTimestamp","disabled","startIcon","AddCircleOutlineRounded","List","dense","ListItem","key","ListItemText","primary","secondary","ListItemSecondaryAction","IconButton","edge","aria-label","openUpdateDialog","Edit","delete","then","res","DeleteOutlineRounded","Dialog","onClose","DialogContent","DialogActions","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec7a5026.chunk.js","sourcesContent":["// src/firebase-config.js\n\nimport firebase from 'firebase';\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyB7IGfhoZPoa7l1MBeYIYQoI4vyAW5S6P0\",\n    authDomain: \"to-do-websi.firebaseapp.com\",\n    databaseURL: \"https://to-do-websi-default-rtdb.firebaseio.com\",\n    projectId: \"to-do-websi\",\n    storageBucket: \"to-do-websi.appspot.com\",\n    messagingSenderId: \"240425522218\",\n    appId: \"1:240425522218:web:c98bc55004731d63899f53\",\n    measurementId: \"G-JQENY8SFEE\"\n  };\n\n// Initialize Firebase\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nexport default db;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport db from './firebase-config'\nimport firebase from 'firebase';\n\nimport { AddCircleOutlineRounded, DeleteOutlineRounded, Edit } from '@material-ui/icons';\n\nimport { Button, TextField, Container, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText, Dialog, DialogContent, DialogActions } from '@material-ui/core';\n\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n  const [open, setOpen] = useState(false);\n  const [update, setUpdate] = useState('');\n  const [toUpdateId, setToUpdateId] = useState('');\n\n\n  useEffect(() => {\n    console.log('useEffect Hook!!!');\n\n    db.collection('todos').orderBy('datetime', 'desc').onSnapshot(snapshot => {\n      console.log('Firebase Snap!');\n      setTodos(snapshot.docs.map(doc => {\n        return {\n          id: doc.id,\n          name: doc.data().todo,\n          datatime: doc.data().datatime\n        }\n      }))\n    })\n\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input,\n      datetime: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setInput('');\n  }\n\n  const deleteTodo = (id) => {\n    db.collection('todos').doc(id).delete().then(res => {\n      console.log('Deleted!', res);\n    });\n  }\n\n  const openUpdateDialog = (todo) => {\n    setOpen(true);\n    setToUpdateId(todo.id);\n    setUpdate(todo.name);\n  }\n\n  const editTodo = () => {\n    db.collection('todos').doc(toUpdateId).update({\n      todo: update\n    });\n    setOpen(false);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Container maxWidth=\"sm\">\n\n      <form noValidate>\n\n        <TextField\n          variant=\"outlined\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"todo\"\n          label=\"Enter ToDo\"\n          name=\"todo\"\n          autoFocus\n          value={input}\n          onChange={event => setInput(event.target.value)}\n        />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          fullWidth\n          onClick={addTodo}\n          disabled={!input}\n          startIcon={<AddCircleOutlineRounded />}\n        >\n          Add Todo\n      </Button>\n\n      </form>\n\n      <List dense={true}>\n        {\n          todos.map(todo => (\n\n            <ListItem key={todo.id} >\n\n              <ListItemText\n                primary={todo.name}\n                secondary={todo.datetime}\n              />\n\n              <ListItemSecondaryAction>\n                <IconButton edge=\"end\" aria-label=\"Edit\" onClick={() => openUpdateDialog(todo)}>\n                  <Edit />\n                </IconButton>\n                <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => deleteTodo(todo.id)}>\n                  <DeleteOutlineRounded />\n                </IconButton>\n              </ListItemSecondaryAction>\n\n            </ListItem>\n          ))\n        }\n      </List>\n\n      <Dialog open={open} onClose={handleClose}>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"normal\"\n            label=\"Update Todo\"\n            type=\"text\"\n            fullWidth\n            name=\"updateTodo\"\n            value={update}\n            onChange={event => setUpdate(event.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={editTodo} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n    </Container >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}